name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  checks:
    name: fmt + clippy + test
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-D warnings"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain (stable) with components
        run: |
          set -eux
          # install rustup and the requested toolchain
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          # make cargo available to following steps
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          # install components
          rustup component add rustfmt clippy

      - name: Verify formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace -- -D warnings

      - name: Run tests
        run: cargo test --workspace --all-features

  build:
    name: matrix build & test
    runs-on: ${{ matrix.os }}
    env:
      RUSTFLAGS: "-D warnings"
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        toolchain: [stable, nightly]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/checkout@v4

      - name: Fail on deprecated GitHub Actions commands
        run: |
          # search repository for deprecated commands that should be replaced with environment files
          set -euo pipefail
          # search, but filter out this workflow file so the check doesn't report its own text
          grep -R --line-number --binary-files=without-match --exclude-dir=.git --exclude-dir=target -e 'set-output' -e 'set-env' . \
            | grep -v '\.github/workflows/ci.yml' | tee /tmp/deprecated_matches || true

          if [ -s /tmp/deprecated_matches ]; then
            echo "::error::Deprecated GitHub Actions command found (set-output or set-env). Replace with environment files: GITHUB_OUTPUT / GITHUB_ENV"
            echo "Matches:" 
            cat /tmp/deprecated_matches
            exit 1
          fi

      - name: Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust
        run: |
          set -eux
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ matrix.toolchain }}
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          # add components when available (some toolchains may not have them)
          rustup component add rustfmt clippy || true

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

      - name: Check formatting (stable only)
        if: matrix.toolchain == 'stable'
        run: cargo fmt -- --check

      - name: Run clippy (stable only)
        if: matrix.toolchain == 'stable'
        run: cargo clippy -- -D warnings

  report-ci:
    name: CI
    needs: [checks, build]
    runs-on: ubuntu-latest
    permissions:
      checks: write
    steps:
      - name: Create CI aggregated check-run
        uses: actions/github-script@v6
        with:
          script: |
            // Determine overall conclusion: if any required job failed, mark failure.
            const needs = context.payload && context.payload.pull_request ? process.env.GITHUB_JOB_NEEDS : null;
            // Simpler approach: mark success when this job runs (previous jobs completed). If any needed job failed, this job may still run only if configured; for now mark success.
            const sha = context.payload && context.payload.pull_request ? context.payload.pull_request.head.sha : context.sha;
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'CI',
              head_sha: sha,
              status: 'completed',
              conclusion: 'success',
              output: {
                title: 'CI aggregated',
                summary: 'Aggregated CI status from workflow jobs.'
              }
            });
