name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

# Ensure the workflow token can create check runs for the aggregator
permissions:
  checks: write
  contents: read
  packages: write

jobs:
  checks:
    name: fmt + clippy + test
    runs-on: ubuntu-24.04
    env:
      # TEST_REDIS_DB will be computed per-job and exported into the environment.
      # We do not hardcode it here so concurrent jobs get distinct DB indexes.
      RUSTFLAGS: "-D warnings"
    steps:
      - name: Compute TEST_REDIS_DB
        run: |
          set -eux
          # Pick a DB index within Redis' default range (0-15) by hashing GITHUB_JOB
          range=16
          hex=$(echo -n "$GITHUB_JOB" | md5sum | awk '{print $1}' | cut -c1-8)
          db=$((0x$hex % range))
          echo "TEST_REDIS_DB=$db" >> $GITHUB_ENV
        shell: bash
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # shallow clone to avoid fetching large history and reduce disk usage
          fetch-depth: 1
      - name: Clear possible sccache env
        run: |
          set -eux
          echo "RUSTC_WRAPPER=" >> $GITHUB_ENV
          echo "SCCACHE_DIR=" >> $GITHUB_ENV

      - name: Runner disk diagnostics
        run: |
          set -eux
          echo "--- df -h ---"
          df -h || true
          echo "--- du RUNNER_TEMP (may be empty) ---"
          du -sh "${RUNNER_TEMP}" || true

      - name: Set CARGO_TARGET_DIR
        run: |
          set -eux
          # Keep the step for backward compatibility with environments that
          # prefer runtime env writes; this mirrors the job-level env above.
          echo "CARGO_TARGET_DIR=${RUNNER_TEMP}/target" >> $GITHUB_ENV

      - name: Prune CARGO_TARGET_DIR
        run: |
          set -eux
          # Ensure any leftover build artifacts are removed before the job starts.
          # Use the CARGO_TARGET_DIR env (written above) when available.
          if [ -n "${CARGO_TARGET_DIR:-}" ]; then
            rm -rf "${CARGO_TARGET_DIR}" || true
            mkdir -p "${CARGO_TARGET_DIR}"
          else
            rm -rf "${RUNNER_TEMP}/target" || true
            mkdir -p "${RUNNER_TEMP}/target"
          fi

      - name: Ensure no stale target
        run: |
          set -eux
          rm -rf "${RUNNER_TEMP}/target" || true

      - name: Install Rust toolchain (stable) with components
        run: |
          set -eux
          # install rustup and the requested toolchain
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          # make cargo available to following steps
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          # install components
          rustup component add rustfmt clippy

      # sccache removed: not using compiler wrapper or remote caching in CI

      - name: Verify formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        env:
          RUSTC_WRAPPER: ""
        run: cargo clippy --workspace -- -D warnings

      # Full workspace tests are intentionally not run in `checks` to avoid
      # duplicate test runs; `build` job runs tests (release) for the
      # target toolchain.

  build:
    name: matrix build & test
    runs-on: ${{ matrix.os }}
    env:
      # TEST_REDIS_DB will be computed per-job below (derived from GITHUB_JOB).
      RUSTFLAGS: "-D warnings"
      # Limit parallel rustc/link jobs to reduce temporary disk and memory pressure on runners.
      # Increase to 4 to speed up builds; balance against runner resources.
      CARGO_BUILD_JOBS: '4'
    strategy:
      matrix:
        os: [ubuntu-24.04]
        toolchain: [stable]
    steps:
      - name: Compute TEST_REDIS_DB
        run: |
          set -eux
          range=16
          hex=$(echo -n "$GITHUB_JOB" | md5sum | awk '{print $1}' | cut -c1-8)
          db=$((0x$hex % range))
          echo "TEST_REDIS_DB=$db" >> $GITHUB_ENV
        shell: bash
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Clear possible sccache env
        run: |
          set -eux
          echo "RUSTC_WRAPPER=" >> $GITHUB_ENV
          echo "SCCACHE_DIR=" >> $GITHUB_ENV

      - name: Runner disk diagnostics
        run: |
          set -eux
          echo "--- df -h ---"
          df -h || true
          echo "--- du RUNNER_TEMP (may be empty) ---"
          du -sh "${RUNNER_TEMP}" || true

      - name: Set CARGO_TARGET_DIR
        run: |
          set -eux
          echo "CARGO_TARGET_DIR=${RUNNER_TEMP}/target" >> $GITHUB_ENV

      - name: Prune CARGO_TARGET_DIR
        run: |
          set -eux
          if [ -n "${CARGO_TARGET_DIR:-}" ]; then
            rm -rf "${CARGO_TARGET_DIR}" || true
            mkdir -p "${CARGO_TARGET_DIR}"
          else
            rm -rf "${RUNNER_TEMP}/target" || true
            mkdir -p "${RUNNER_TEMP}/target"
          fi

      - name: Ensure no stale target
        run: |
          set -eux
          rm -rf "${RUNNER_TEMP}/target" || true


      - name: Fail on deprecated GitHub Actions commands
        run: |
          # search repository for deprecated commands that should be replaced with environment files
          set -euo pipefail
          # search, but filter out this workflow file so the check doesn't report its own text
          grep -R --line-number --binary-files=without-match --exclude-dir=.git --exclude-dir=target -e 'set-output' -e 'set-env' . \
            | grep -v '\.github/workflows/ci.yml' | tee /tmp/deprecated_matches || true

          if [ -s /tmp/deprecated_matches ]; then
            echo "::error::Deprecated GitHub Actions command found (set-output or set-env). Replace with environment files: GITHUB_OUTPUT / GITHUB_ENV"
            echo "Matches:" 
            cat /tmp/deprecated_matches
            exit 1
          fi

      - name: Cache cargo registry (no target)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust
        run: |
          set -eux
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ matrix.toolchain }}
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          # add components when available (some toolchains may not have them)
          rustup component add rustfmt clippy || true

      # sccache removed: not using compiler wrapper or remote caching in CI

      - name: Build
        env:
          RUSTC_WRAPPER: ''
          SCCACHE_DIR: ''
        run: cargo build --release --verbose -j 4

      - name: Run tests
        # Run tests with increased parallelism to speed up test runs.
        env:
          RUSTC_WRAPPER: ''
          SCCACHE_DIR: ''
        run: cargo test --release --verbose -j 4

      # Formatting and clippy are run in the `checks` job to provide
      # fast feedback; remove duplicated steps here to reduce CI work.

  # docker:
  #   name: Build and push Docker image
  #   runs-on: ubuntu-24.04
  #   needs: [checks]
  #   if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Extract metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ghcr.io/${{ github.repository }}
  #         tags: |
  #           type=ref,event=branch
  #           type=ref,event=tag
  #           type=sha,prefix={{branch}}-
  #           type=raw,value=latest,enable={{is_default_branch}}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: ./docker/Dockerfile
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  report-ci:
    name: CI aggregated
    needs: [checks, build]
    runs-on: ubuntu-24.04
    permissions:
      checks: write
    steps:
      - name: Create CI aggregated check-run
        uses: actions/github-script@v6
        with:
          script: |
            // Compute aggregated conclusion by listing jobs for this workflow run.
            const runId = parseInt(process.env.GITHUB_RUN_ID || context.runId, 10);
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = context.payload && context.payload.pull_request ? context.payload.pull_request.head.sha : context.sha;

            const jobsResp = await github.rest.actions.listJobsForWorkflowRun({ owner, repo, run_id: runId });
            const jobs = (jobsResp.data && jobsResp.data.jobs) || [];

              console.log(`Found ${jobs.length} job(s) in this run`);
              console.log(jobs.map(j => ({ id: j.id, name: j.name, status: j.status, conclusion: j.conclusion })));

            // Determine if any job (other than this aggregator) failed.
            const failedJobs = jobs.filter(j => j.name && !j.name.toLowerCase().includes('report-ci') && j.status === 'completed' && j.conclusion !== 'success');
            console.log(`Failed jobs: ${failedJobs.length}`);
            const conclusion = failedJobs.length > 0 ? 'failure' : 'success';

            const summaryLines = [];
            summaryLines.push(`Checked ${jobs.length} job(s).`);
            if (failedJobs.length > 0) {
              summaryLines.push(`Failed jobs (${failedJobs.length}):`);
              for (const f of failedJobs) {
                summaryLines.push(`- ${f.name} (${f.conclusion})`);
              }
            } else {
              summaryLines.push('All upstream jobs succeeded.');
            }

            try {
              await github.rest.checks.create({
                owner,
                repo,
                // Report the aggregated result under the top-level required check name
                name: 'CI',
                head_sha: sha,
                status: 'completed',
                conclusion,
                output: {
                  title: 'CI aggregated',
                  summary: summaryLines.join('\n')
                }
              });
              console.log('Created aggregated check-run');
            } catch (err) {
              console.error('Failed to create aggregated check-run:', err);
              throw err;
            }