name: CI

on:
  push: {}
  pull_request: {}

jobs:
  checks:
    name: fmt + clippy + test
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-D warnings"
      RUSTC_WRAPPER: sccache
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain (stable) with components
        run: |
          set -eux
          # install rustup and the requested toolchain
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          # make cargo available to following steps
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          # install components
          rustup component add rustfmt clippy

      - name: Setup sccache
        uses: actions-rs/sccache@v1
        with:
          # install latest prebuilt sccache
          version: latest

      - name: Verify formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace -- -D warnings

      - name: Run tests
        run: cargo test --workspace --all-features

  build:
    name: matrix build & test
    runs-on: ${{ matrix.os }}
    env:
      RUSTFLAGS: "-D warnings"
      RUSTC_WRAPPER: sccache
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        toolchain: [stable, nightly]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/checkout@v4

      - name: Fail on deprecated GitHub Actions commands
        run: |
          # search repository for deprecated commands that should be replaced with environment files
          set -euo pipefail
          # search, but filter out this workflow file so the check doesn't report its own text
          grep -R --line-number --binary-files=without-match --exclude-dir=.git --exclude-dir=target -e 'set-output' -e 'set-env' . \
            | grep -v '\.github/workflows/ci.yml' | tee /tmp/deprecated_matches || true

          if [ -s /tmp/deprecated_matches ]; then
            echo "::error::Deprecated GitHub Actions command found (set-output or set-env). Replace with environment files: GITHUB_OUTPUT / GITHUB_ENV"
            echo "Matches:" 
            cat /tmp/deprecated_matches
            exit 1
          fi

      - name: Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust
        run: |
          set -eux
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ matrix.toolchain }}
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          # add components when available (some toolchains may not have them)
          rustup component add rustfmt clippy || true

      - name: Setup sccache
        uses: actions-rs/sccache@v1
        with:
          version: latest

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

      - name: Check formatting (stable only)
        if: matrix.toolchain == 'stable'
        run: cargo fmt -- --check

      - name: Run clippy (stable only)
        if: matrix.toolchain == 'stable'
        run: cargo clippy -- -D warnings

  report-ci:
    name: CI
    needs: [checks, build]
    runs-on: ubuntu-latest
    permissions:
      checks: write
    steps:
      - name: Create CI aggregated check-run
        uses: actions/github-script@v6
        with:
          script: |
            // Compute aggregated conclusion by listing jobs for this workflow run.
            const runId = parseInt(process.env.GITHUB_RUN_ID || context.runId, 10);
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = context.payload && context.payload.pull_request ? context.payload.pull_request.head.sha : context.sha;

            const jobsResp = await github.rest.actions.listJobsForWorkflowRun({ owner, repo, run_id: runId });
            const jobs = (jobsResp.data && jobsResp.data.jobs) || [];

            // Determine if any job (other than this aggregator) failed.
            const failedJobs = jobs.filter(j => j.name && !j.name.toLowerCase().includes('report-ci') && j.status === 'completed' && j.conclusion !== 'success');
            const conclusion = failedJobs.length > 0 ? 'failure' : 'success';

            const summaryLines = [];
            summaryLines.push(`Checked ${jobs.length} job(s).`);
            if (failedJobs.length > 0) {
              summaryLines.push(`Failed jobs (${failedJobs.length}):`);
              for (const f of failedJobs) {
                summaryLines.push(`- ${f.name} (${f.conclusion})`);
              }
            } else {
              summaryLines.push('All upstream jobs succeeded.');
            }

            await github.rest.checks.create({
              owner,
              repo,
              name: 'CI',
              head_sha: sha,
              status: 'completed',
              conclusion,
              output: {
                title: 'CI aggregated',
                summary: summaryLines.join('\n')
              }
            });
